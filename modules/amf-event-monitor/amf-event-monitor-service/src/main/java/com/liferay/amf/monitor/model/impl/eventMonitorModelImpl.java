/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.amf.monitor.model.impl;

import com.liferay.amf.monitor.model.eventMonitor;
import com.liferay.amf.monitor.model.eventMonitorModel;
import com.liferay.amf.monitor.model.eventMonitorSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the eventMonitor service. Represents a row in the &quot;AmfEventMonitor_eventMonitor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>eventMonitorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link eventMonitorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see eventMonitorImpl
 * @generated
 */
@JSON(strict = true)
public class eventMonitorModelImpl
	extends BaseModelImpl<eventMonitor> implements eventMonitorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event monitor model instance should use the <code>eventMonitor</code> interface instead.
	 */
	public static final String TABLE_NAME = "AmfEventMonitor_eventMonitor";

	public static final Object[][] TABLE_COLUMNS = {
		{"eventMonitorId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"userIP", Types.VARCHAR}, {"eventType", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("eventMonitorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userIP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventType", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AmfEventMonitor_eventMonitor (eventMonitorId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,userIP VARCHAR(75) null,eventType VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table AmfEventMonitor_eventMonitor";

	public static final String ORDER_BY_JPQL =
		" ORDER BY eventMonitor.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AmfEventMonitor_eventMonitor.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EVENTTYPE_COLUMN_BITMASK = 1L;

	public static final long USERID_COLUMN_BITMASK = 2L;

	public static final long CREATEDATE_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static eventMonitor toModel(eventMonitorSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		eventMonitor model = new eventMonitorImpl();

		model.setEventMonitorId(soapModel.getEventMonitorId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setUserIP(soapModel.getUserIP());
		model.setEventType(soapModel.getEventType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<eventMonitor> toModels(eventMonitorSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<eventMonitor> models = new ArrayList<eventMonitor>(
			soapModels.length);

		for (eventMonitorSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public eventMonitorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventMonitorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventMonitorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventMonitorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return eventMonitor.class;
	}

	@Override
	public String getModelClassName() {
		return eventMonitor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<eventMonitor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<eventMonitor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<eventMonitor, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((eventMonitor)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<eventMonitor, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<eventMonitor, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(eventMonitor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<eventMonitor, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<eventMonitor, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, eventMonitor>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			eventMonitor.class.getClassLoader(), eventMonitor.class,
			ModelWrapper.class);

		try {
			Constructor<eventMonitor> constructor =
				(Constructor<eventMonitor>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<eventMonitor, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<eventMonitor, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<eventMonitor, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<eventMonitor, Object>>();
		Map<String, BiConsumer<eventMonitor, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<eventMonitor, ?>>();

		attributeGetterFunctions.put(
			"eventMonitorId", eventMonitor::getEventMonitorId);
		attributeSetterBiConsumers.put(
			"eventMonitorId",
			(BiConsumer<eventMonitor, Long>)eventMonitor::setEventMonitorId);
		attributeGetterFunctions.put("userId", eventMonitor::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<eventMonitor, Long>)eventMonitor::setUserId);
		attributeGetterFunctions.put("userName", eventMonitor::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<eventMonitor, String>)eventMonitor::setUserName);
		attributeGetterFunctions.put("createDate", eventMonitor::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<eventMonitor, Date>)eventMonitor::setCreateDate);
		attributeGetterFunctions.put("userIP", eventMonitor::getUserIP);
		attributeSetterBiConsumers.put(
			"userIP",
			(BiConsumer<eventMonitor, String>)eventMonitor::setUserIP);
		attributeGetterFunctions.put("eventType", eventMonitor::getEventType);
		attributeSetterBiConsumers.put(
			"eventType",
			(BiConsumer<eventMonitor, String>)eventMonitor::setEventType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEventMonitorId() {
		return _eventMonitorId;
	}

	@Override
	public void setEventMonitorId(long eventMonitorId) {
		_eventMonitorId = eventMonitorId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getUserIP() {
		if (_userIP == null) {
			return "";
		}
		else {
			return _userIP;
		}
	}

	@Override
	public void setUserIP(String userIP) {
		_userIP = userIP;
	}

	@JSON
	@Override
	public String getEventType() {
		if (_eventType == null) {
			return "";
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (_originalEventType == null) {
			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public String getOriginalEventType() {
		return GetterUtil.getString(_originalEventType);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, eventMonitor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public eventMonitor toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, eventMonitor>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		eventMonitorImpl eventMonitorImpl = new eventMonitorImpl();

		eventMonitorImpl.setEventMonitorId(getEventMonitorId());
		eventMonitorImpl.setUserId(getUserId());
		eventMonitorImpl.setUserName(getUserName());
		eventMonitorImpl.setCreateDate(getCreateDate());
		eventMonitorImpl.setUserIP(getUserIP());
		eventMonitorImpl.setEventType(getEventType());

		eventMonitorImpl.resetOriginalValues();

		return eventMonitorImpl;
	}

	@Override
	public int compareTo(eventMonitor eventMonitor) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), eventMonitor.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof eventMonitor)) {
			return false;
		}

		eventMonitor eventMonitor = (eventMonitor)obj;

		long primaryKey = eventMonitor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		eventMonitorModelImpl eventMonitorModelImpl = this;

		eventMonitorModelImpl._originalUserId = eventMonitorModelImpl._userId;

		eventMonitorModelImpl._setOriginalUserId = false;

		eventMonitorModelImpl._originalEventType =
			eventMonitorModelImpl._eventType;

		eventMonitorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<eventMonitor> toCacheModel() {
		eventMonitorCacheModel eventMonitorCacheModel =
			new eventMonitorCacheModel();

		eventMonitorCacheModel.eventMonitorId = getEventMonitorId();

		eventMonitorCacheModel.userId = getUserId();

		eventMonitorCacheModel.userName = getUserName();

		String userName = eventMonitorCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			eventMonitorCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventMonitorCacheModel.createDate = createDate.getTime();
		}
		else {
			eventMonitorCacheModel.createDate = Long.MIN_VALUE;
		}

		eventMonitorCacheModel.userIP = getUserIP();

		String userIP = eventMonitorCacheModel.userIP;

		if ((userIP != null) && (userIP.length() == 0)) {
			eventMonitorCacheModel.userIP = null;
		}

		eventMonitorCacheModel.eventType = getEventType();

		String eventType = eventMonitorCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			eventMonitorCacheModel.eventType = null;
		}

		return eventMonitorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<eventMonitor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<eventMonitor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<eventMonitor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((eventMonitor)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<eventMonitor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<eventMonitor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<eventMonitor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((eventMonitor)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, eventMonitor>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _eventMonitorId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private String _userIP;
	private String _eventType;
	private String _originalEventType;
	private long _columnBitmask;
	private eventMonitor _escapedModel;

}